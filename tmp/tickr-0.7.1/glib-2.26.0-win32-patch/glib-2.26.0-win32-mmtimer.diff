diff -u -r glib-2.26.0/glib/gmain.c glib-2.26.0-win32-mmtimer/glib/gmain.c
--- glib-2.26.0/glib/gmain.c	2010-09-13 15:57:51 +0000
+++ glib-2.26.0-win32-mmtimer/glib/gmain.c	2010-12-04 16:21:25 +0000
@@ -108,6 +108,53 @@
 #include "gtimer.h"
 #endif
 
+#ifdef G_OS_WIN32
+/* starting_time = time from Unix epoch to system start
+ * in nanoseconds
+ */
+static guint64 init_win32_mmtimer ()
+{
+  TIMECAPS tc;
+  MMRESULT mmr;
+  unsigned int highest_res;
+  guint64 starting_time;
+
+  mmr = timeGetDevCaps (&tc, sizeof (TIMECAPS));
+  highest_res = tc.wPeriodMin;
+  if (timeBeginPeriod (highest_res) == TIMERR_NOERROR)
+    {
+      /* Returns 100s of nanoseconds since start of 1601 */
+      GetSystemTimeAsFileTime ((FILETIME *)&starting_time);
+      /* Offset to Unix epoch */
+      starting_time -= G_GINT64_CONSTANT (116444736000000000);
+      /* Convert to nanoseconds */
+      starting_time *= 100;
+      /* Substract uptime */
+      return (starting_time -= timeGetTime () * 1000000);
+    }
+  else
+    {
+      g_error ("init_win32_mmtimer() error");
+      return 0;
+    }
+}
+
+/* Time since Unix epoch - Will init timer on 1st call */
+guint64 get_time_nanosec_from_win32_mmtimer ()
+{
+  static guint64 starting_time;
+  static int i = 0;
+
+  if (i == 0)
+    {
+      i++;
+      /* Call only once */
+      starting_time = init_win32_mmtimer ();
+    }
+  return (guint64)(timeGetTime () * 1000000 + starting_time);
+}
+#endif
+
 /**
  * SECTION:main
  * @title: The Main Event Loop
@@ -1793,22 +1840,14 @@
   result->tv_sec = r.tv_sec;
   result->tv_usec = r.tv_usec;
 #else
-  FILETIME ft;
   guint64 time64;
 
   g_return_if_fail (result != NULL);
 
-  GetSystemTimeAsFileTime (&ft);
-  memmove (&time64, &ft, sizeof (FILETIME));
-
-  /* Convert from 100s of nanoseconds since 1601-01-01
-   * to Unix epoch. Yes, this is Y2038 unsafe.
-   */
-  time64 -= G_GINT64_CONSTANT (116444736000000000);
-  time64 /= 10;
-
+  time64 = get_time_nanosec_from_win32_mmtimer () / 1000; /* in usec */
   result->tv_sec = time64 / 1000000;
   result->tv_usec = time64 % 1000000;
+  return;
 #endif
 }
 
diff -u -r glib-2.26.0/glib/gmain.h glib-2.26.0-win32-mmtimer/glib/gmain.h
--- glib-2.26.0/glib/gmain.h	2010-08-09 13:34:46 +0000
+++ glib-2.26.0-win32-mmtimer/glib/gmain.h	2010-12-04 15:54:25 +0000
@@ -28,6 +28,8 @@
 #include <glib/gslist.h>
 #include <glib/gthread.h>
 
+guint64 get_time_nanosec_from_win32_mmtimer ();
+
 G_BEGIN_DECLS
 
 /**
diff -u -r glib-2.26.0/glib/gthread.c glib-2.26.0-win32-mmtimer/glib/gthread.c
--- glib-2.26.0/glib/gthread.c	2010-09-21 18:10:13 +0000
+++ glib-2.26.0-win32-mmtimer/glib/gthread.c	2010-12-04 15:54:25 +0000
@@ -1859,17 +1859,7 @@
 gettime (void)
 {
 #ifdef G_OS_WIN32
-  guint64 v;
-
-  /* Returns 100s of nanoseconds since start of 1601 */
-  GetSystemTimeAsFileTime ((FILETIME *)&v);
-
-  /* Offset to Unix epoch */
-  v -= G_GINT64_CONSTANT (116444736000000000);
-  /* Convert to nanoseconds */
-  v *= 100;
-
-  return v;
+  return get_time_nanosec_from_win32_mmtimer ();
 #else
   struct timeval tv;
 
